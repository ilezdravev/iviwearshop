{"version":3,"sources":["webpack:///./src/js/components/media/MediaPlayer/index.js","webpack:///./src/js/components/media/MediaPlayer/externalVideoPlayer.js","webpack:///./src/js/components/media/MediaPlayer/localVideoPlayer.js"],"names":["MediaPlayer","appstate","parentNode","useState","playing","setPlaying","mediaUrl","setMediaUrl","loop","setLoop","muted","setMuted","controls","setControls","player","setPlayer","useEffect","dataset","videoLink","options","JSON","parse","getClosest","isPlaying","window","addEventListener","e","top","getBoundingClientRect","bottom","parentController","includes","component","node","ctx","element","ReactDOM","render","unmountComponentAtNode","console","error","ConditionalWrapper","condition","wrapper","children","ExternalVideoPlayer","identifier","autoPlay","setPlay","setUrl","on","ev","target","id","split","scrollableAncestor","onEnter","previousPosition","currentPosition","onLeave","className","url","width","height","config","youtube","playerVars","modestbranding","showinfo","vimeo","playerOptions","responsive","LocalVideoPlayer","videoRef","useRef","current","play","pause","ref","style","src","playsInline"],"mappings":"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","file":"5.chunk.211fac53f7a4655a438e.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, { Component, useEffect, useState } from 'react';\nimport { component } from 'picoapp'\nimport LocalVideoPlayer from './localVideoPlayer';\nimport {getClosest} from '../../../utilities';\nimport ExternalVideoPlayer from './externalVideoPlayer';\n\nconst MediaPlayer = ({appstate,parentNode}) =>  {\n\n  const [playing, setPlaying] = useState(false);\n  const [mediaUrl, setMediaUrl] = useState(null);\n  const [loop, setLoop] = useState(null);\n  const [muted, setMuted] = useState(null);\n  const [controls, setControls] = useState(false);\n  const [ player, setPlayer ] = useState(null);\n\n  useEffect(() => {\n    setMediaUrl(parentNode.dataset.videoLink)\n\n    const options = JSON.parse(parentNode.dataset.options);\n\n    setPlaying(options.playing);\n    setLoop(options.loop);\n    setMuted(options.muted);\n    setControls(options.controls);\n\n    const homeHero = getClosest(parentNode, '.Hero--home');\n\n    if(homeHero){\n      let isPlaying = playing;\n\n      window.addEventListener('scroll', (e) => {\n        const top = parentNode.getBoundingClientRect().top;\n        const bottom = parentNode.getBoundingClientRect().bottom;\n        \n        if(!isPlaying && top < 150 && bottom > 50){\n          setPlaying(true);\n          isPlaying = true;\n        }\n\n        if( ( isPlaying && bottom <= 50 ) || ( isPlaying && top >= 150 ) ){\n          setPlaying(false);\n          isPlaying = false;\n        }\n      })\n    }\n\n    // Control video playback based on parent modal state\n    let parentController = getClosest(parentNode, '.js-videoController');\n    if (parentController) {\n      parentController.addEventListener('isActive', () => {\n        setPlaying(true);\n      });\n      parentController.addEventListener('isInactive', () => {\n        setPlaying(false);\n      });\n    }\n  }, [])\n\n  useEffect(() => {\n    if(mediaUrl?.includes('shopify')){\n      setPlayer('local');\n    } else {\n      setPlayer('external')\n    }\n  }, [mediaUrl])\n  \n  return(\n    <>\n    {\n      player == 'local'\n      ? <LocalVideoPlayer muted={muted} playing={playing} loop={loop}  controls={controls} mediaUrl={mediaUrl}/>\n      : <ExternalVideoPlayer muted={muted} playing={playing} loop={loop}  controls={controls} mediaUrl={mediaUrl}/>\n    } \n   </>\n  )\n}\n\nexport default component((node, ctx) => {\n  const element = <MediaPlayer appstate={ctx} parentNode={node} />;\n  ReactDOM.render(element, node);\n\n  // Unmount component on Pjax navigation\n  return function () {\n    try {\n      ReactDOM.unmountComponentAtNode(node);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n});\n","import React, { Component, useEffect, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { Waypoint } from 'react-waypoint';\nimport { getClosest } from '../../../utilities';\n// import './MediaPlayer.scss';\n\nconst ConditionalWrapper = ({ condition, wrapper, children }) => (condition ? wrapper(children) : children);\n\nconst ExternalVideoPlayer = ({loop, muted, playing, controls, mediaUrl, identifier, ctx }) => {\n\n  const [autoPlay, setAutoPlay] = useState(playing);\n  const [play, setPlay] = useState(playing);\n  const [url, setUrl] = useState(mediaUrl);\n\n  useEffect(() => {\n    if (identifier) {\n      ctx.on('toggleVideo', (ev) => {\n        if (identifier && ev.target === identifier) {\n          setPlaying(!playing);\n        }\n      });\n    }\n  }, [identifier]);\n\n  useEffect(() => { \n    // Control video playback based on parent modal state\n    let parentController = null;//getClosest(parentNode, '.js-videoController');\n    if (parentController) {\n      parentController.addEventListener('isActive', () => {\n        setPlay(true);\n      });\n      parentController.addEventListener('isInactive', () => {\n        setPlay(false);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if(mediaUrl?.includes('youtube.com/embed')){\n      const id = mediaUrl.split('embed/')[1].split('?')[0]\n      setUrl(`https://www.youtube.com/watch?v=${id}`);\n    } else {\n      setUrl(mediaUrl);\n    }\n  }, [])\n\n  return (\n    <ConditionalWrapper\n      condition={autoPlay}\n      wrapper={(children) => (\n        <Waypoint\n          scrollableAncestor={window}\n          onEnter={({ previousPosition, currentPosition }) => {\n            setPlay(true);\n          }}\n          onLeave={() => {\n            setPlay(false);\n          }}\n        >\n          {children}\n        </Waypoint>\n      )}\n    >\n      <div className=\"media-player-wrapper\">\n        <ReactPlayer\n          className=\"media-player\"\n          url={mediaUrl}\n          playing={playing}\n          width=\"100%\"\n          height=\"100%\"\n          controls={controls}\n          loop={loop}\n          muted={muted}\n          config={{\n            youtube: {\n              playerVars: {\n                modestbranding: 1,\n                showinfo: 0,\n              },\n            },\n            vimeo: {\n              playerOptions: {\n                responsive: true,\n              },\n            },\n          }}\n        />\n      </div>\n    </ConditionalWrapper>\n  );\n};\n\nexport default ExternalVideoPlayer;","import React, { Component, useState, useEffect, useRef } from 'react';\n\nconst LocalVideoPlayer = ({mediaUrl, loop, muted, playing, controls}) =>  {\n\n  const videoRef = useRef(null);\n  \n  useEffect(() => {\n    if(playing){\n      videoRef.current.play();\n    } else {\n      videoRef.current.pause();\n    }\n  }, [playing])\n\n  return(\n    <video \n      ref={videoRef}\n      className=\"video_player\"\n      style={{width:'100%', height: '100%'}}\n      src={mediaUrl}\n      muted={muted}\n      loop={loop}\n      autoPlay={playing}\n      controls={controls}\n      playsInline\n    ></video>\n  )\n}\n\nexport default LocalVideoPlayer;"],"sourceRoot":""}