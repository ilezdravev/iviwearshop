{"version":3,"sources":["webpack:///./src/js/components/ui/Accordion.js"],"names":["Accordion","el","ctx","this","identifier","dataset","init","bindEvents","items","querySelectorAll","forEach","element","addEventListener","e","target","classList","contains","getClosest","preventDefault","toggleItem","blur","event","keyCode","window","onhashchange","handleHashUpdate","bind","remove","add","Array","prototype","slice","call","filter","item","isEqualNode","autoScroll","location","hash","newPanel","querySelector","substring","component","node"],"mappings":"sJAIMA,E,WACJ,WAAYC,EAAIC,GAAK,YACnBC,KAAKD,IAAMA,EACXC,KAAKC,WAAaH,EAAGI,QAAQD,WAC7BD,KAAKG,KAAKL,GACVE,KAAKI,a,gCAGP,SAAKN,GACHE,KAAKF,GAAKA,EACVE,KAAKK,MAAQP,EAAGQ,iBAAiB,sB,wBAInC,WAAa,WACXN,KAAKK,MAAME,SAAQ,SAACC,GAClBA,EAAQC,iBAAiB,SAAS,SAACC,IAC7BA,EAAEC,OAAOC,UAAUC,SAAS,sBAAwBC,YAAWJ,EAAEC,OAAQ,yBAC3ED,EAAEK,iBACF,EAAKC,WAAWR,GAChBM,YAAWJ,EAAEC,OAAQ,sBAAsBM,WAG/CT,EAAQC,iBAAiB,SAAS,SAACC,GACX,KAAlBQ,MAAMC,UACJT,EAAEC,OAAOC,UAAUC,SAAS,sBAAwBC,YAAWJ,EAAEC,OAAQ,yBAC3ED,EAAEK,iBACF,EAAKC,WAAWR,GAChBM,YAAWJ,EAAEC,OAAQ,sBAAsBM,cAKnDG,OAAOC,aAAerB,KAAKsB,iBAAiBC,KAAKvB,Q,wBAGnD,SAAWF,GACLA,EAAGc,UAAUC,SAAS,aACxBf,EAAGc,UAAUY,OAAO,aAEpB1B,EAAGc,UAAUa,IAAI,aAEAC,MAAMC,UAAUC,MAAMC,KAAK7B,KAAKK,OAClByB,QAAO,SAACC,GAAD,OAAWA,EAAKC,YAAYlC,MACtDS,SAAQ,SAACT,GACrBA,EAAGc,UAAUY,OAAO,kB,8BAMxB,SAAiBS,GACf,GAAKb,OAAOc,SAASC,KAArB,CAEA,IAAMC,EAAWpC,KAAKF,GAAGuC,cAAc,6BAA+BjB,OAAOc,SAASC,KAAKG,UAAU,GAAK,KAEtGF,GACFpC,KAAKgB,WAAWoB,Q,KAqBPG,uBAAU,SAACC,EAAMzC,GAC9B,IAAIF,EAAU2C,EAAMzC","file":"26.chunk.6402781b4fd170f9c00b.js","sourcesContent":["import { component } from 'picoapp';\n// import jump from 'jump.js';\nimport { getClosest } from '../../utilities';\n\nclass Accordion {\n  constructor(el, ctx) {\n    this.ctx = ctx;\n    this.identifier = el.dataset.identifier;\n    this.init(el);\n    this.bindEvents();\n  }\n\n  init(el) {\n    this.el = el;\n    this.items = el.querySelectorAll('.Accordion__item');\n    // this.handleHashUpdate(false);\n  }\n\n  bindEvents() {\n    this.items.forEach((element) => {\n      element.addEventListener('click', (e) => {\n        if (e.target.classList.contains('Accordion__toggle') || getClosest(e.target, '.Accordion__toggle')) {\n          e.preventDefault();\n          this.toggleItem(element);\n          getClosest(e.target, '.Accordion__toggle').blur()\n        }\n      });\n      element.addEventListener('keyup', (e) => {\n        if (event.keyCode === 13) {\n          if (e.target.classList.contains('Accordion__toggle') || getClosest(e.target, '.Accordion__toggle')) {\n            e.preventDefault();\n            this.toggleItem(element);\n            getClosest(e.target, '.Accordion__toggle').blur()\n          }\n        }\n      });\n    });\n    window.onhashchange = this.handleHashUpdate.bind(this);\n  }\n\n  toggleItem(el) {\n    if (el.classList.contains('is-active')) {\n      el.classList.remove('is-active');\n    } else {\n      el.classList.add('is-active');\n    }\n    var optionsArray = Array.prototype.slice.call(this.items);\n    var filteredArray = optionsArray.filter((item) => !item.isEqualNode(el));\n    filteredArray.forEach((el) => {\n      el.classList.remove('is-active');\n    });\n    // reset the hash\n    //history.pushState('', document.title, window.location.href.split('#')[0]);\n  }\n\n  handleHashUpdate(autoScroll) {\n    if (!window.location.hash) return; // Account for calls without an actual hash change\n\n    const newPanel = this.el.querySelector(':scope > [data-identifier=' + window.location.hash.substring(1) + ']');\n\n    if (newPanel) {\n      this.toggleItem(newPanel);\n\n      if (autoScroll) {\n        // Scroll tabs into view\n        // const panelPos = newPanel.offsetTop - 140;\n        // jump(newPanel, {\n        //   duration: 600,\n        //   offset: -100,\n        //   a11y: false\n        // });\n        // setTimeout(() => {\n        //   window.scrollTo({\n        //     top: panelPos,\n        //     behavior: 'smooth' // Optional, adds animation\n        //   });\n        // }, 200);\n      }\n    }\n  }\n}\n\nexport default component((node, ctx) => {\n  new Accordion(node, ctx);\n});\n"],"sourceRoot":""}