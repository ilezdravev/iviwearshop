{"version":3,"sources":["webpack:///./src/js/components/ui/Dropdown.js"],"names":["Dropdown","el","ctx","this","isActive","identifier","dataset","init","initAnimations","bindEvents","initialized","body","document","querySelector","dropdown","toggler","icon","content","tl","gsap","timeline","paused","onComplete","onReverseComplete","set","clearProps","display","overflow","immediateRender","from","opacity","to","scaleY","on","state","toggle","addEventListener","e","key","close","disabled","open","play","reverse","component","node"],"mappings":"8JAIMA,E,WACJ,WAAYC,EAAIC,GAAK,YACnBC,KAAKC,UAAW,EAChBD,KAAKD,IAAMA,EACXC,KAAKE,WAAaJ,EAAGK,QAAQD,WAC7BF,KAAKI,KAAKN,GACVE,KAAKK,iBACLL,KAAKM,aACLN,KAAKO,aAAc,E,gCAGrB,SAAKT,GACHE,KAAKF,GAAKA,EAEVE,KAAKQ,KAAOC,SAASC,cAAc,QACnCV,KAAKW,SAAWb,EAChBE,KAAKY,QAAUH,SAASC,cAAc,qBACtCV,KAAKa,KAAOb,KAAKY,QAAQF,cAAc,SACvCV,KAAKc,QAAUL,SAASC,cAAc,wB,4BAGxC,WAAiB,WAGfV,KAAKe,GAAKC,IAAKC,SAAS,CACtBC,QAAQ,EACRC,WAAY,WACV,EAAKlB,UAAW,GAElBmB,kBAAmB,WACjB,EAAKnB,UAAW,EAChBe,IAAKK,IAAI,EAAKvB,GAAI,CAAEwB,WAAY,WAIpCtB,KAAKe,GAAGM,IAAIrB,KAAKc,QAAS,CAAES,QAAS,QAASC,SAAU,SAAUC,iBAAiB,IAGnFzB,KAAKe,GAAGW,KAAK1B,KAAKc,QAAS,GAAK,CAAEa,QAAS,IAClCC,GAAG5B,KAAKa,KAAM,GAAK,CAAEgB,QAAS,GAAK,K,wBAI9C,WAAa,WACX7B,KAAKD,IAAI+B,GAAG,UAAU,SAACC,GAChBA,EAAM7B,YAAc,EAAKA,YAC5B,EAAK8B,YAKTvB,SAASwB,iBAAiB,SAAS,SAACC,GACrB,UAATA,EAAEC,KACJ,EAAKC,a,oBAKX,WAEMpC,KAAKqC,WAGLrC,KAAKC,SACPD,KAAKoC,QAELpC,KAAKsC,U,kBAIT,WACMtC,KAAKC,UAGTD,KAAKe,GAAGwB,S,mBAGV,WACOvC,KAAKC,UAGVD,KAAKe,GAAGyB,c,KAIGC,uBAAU,SAACC,EAAM3C,GAC9B,IAAIF,EAAS6C,EAAM3C","file":"30.chunk.97d33a8dc4da13b2cffe.js","sourcesContent":["import { component } from 'picoapp';\nimport { str2json } from '../../utilities';\nimport { gsap } from 'gsap';\n\nclass Dropdown {\n  constructor(el, ctx) {\n    this.isActive = false;\n    this.ctx = ctx;\n    this.identifier = el.dataset.identifier;\n    this.init(el);\n    this.initAnimations();\n    this.bindEvents();\n    this.initialized = true;\n  }\n\n  init(el) {\n    this.el = el;\n    // cache elements\n    this.body = document.querySelector('body');\n    this.dropdown = el;\n    this.toggler = document.querySelector('.Dropdown__toggle');\n    this.icon = this.toggler.querySelector('.icon');\n    this.content = document.querySelector('.Dropdown__content');\n  }\n\n  initAnimations() {\n    // const drawerSections = Array.from(this.drawerBox.children);\n\n    this.tl = gsap.timeline({\n      paused: true,\n      onComplete: () => {\n        this.isActive = true;\n      },\n      onReverseComplete: () => {\n        this.isActive = false;\n        gsap.set(this.el, { clearProps: 'all' });\n      },\n    });\n\n    this.tl.set(this.content, { display: 'block', overflow: 'hidden', immediateRender: false });\n\n  \n    this.tl.from(this.content, 0.3, { opacity: 0 })\n            .to(this.icon, 0.3, { scaleY: -1 }, 0);\n    \n  }\n\n  bindEvents() {\n    this.ctx.on('toggle', (state) => {\n      if ( state.identifier == this.identifier ) {\n        this.toggle();\n      }\n    });\n\n    // Close modal with ESC key\n    document.addEventListener('keyup', (e) => {\n      if (e.key == 'Escape') {\n        this.close();\n      }\n    });\n  }\n\n  toggle() {\n    // Bailout if toggle component is disabled\n    if (this.disabled) {\n      return;\n    }\n    if (this.isActive) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  open() {\n    if (this.isActive) {\n      return;\n    }\n    this.tl.play();\n  }\n\n  close() {\n    if (!this.isActive) {\n      return;\n    }\n    this.tl.reverse();\n  }\n}\n\nexport default component((node, ctx) => {\n  new Dropdown(node, ctx);\n});"],"sourceRoot":""}