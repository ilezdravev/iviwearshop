{"version":3,"sources":["webpack:///./src/js/components/cart/GiftWrap.js"],"names":["GiftWrap","giftWrapId","parentNode","getAttribute","useState","giftWrapAdded","setGiftWrapAdded","showInput","setShowInput","giftWrapMessage","setGiftWrapMessage","e","a","axios","get","headers","Pragma","response","cartItems","data","items","id","console","log","addProductToCart","preventDefault","post","quantity","properties","GiftTo","location","reload","useEffect","getCartInfo","className","type","onChange","target","checked","handleChangeCheck","value","data-style","onClick","disabled","component","node","ctx","element","appstate","ReactDOM","render","unmountComponentAtNode","error"],"mappings":"+tCAKA,SAASA,EAAT,GAA+B,IAEvBC,EAFuB,EAAZC,WAEaC,aAAa,mBAFd,EAGaC,oBAAS,GAHtB,WAGtBC,EAHsB,KAGPC,EAHO,OAIKF,oBAAS,GAJd,WAItBG,EAJsB,KAIXC,EAJW,OAKiBJ,qBALjB,WAKtBK,EALsB,KAKLC,EALK,yCAY7B,WAA2BC,GAA3B,qBAAAC,EAAA,+EAE2BC,IAAMC,IAAI,WAAY,CAAEC,QAAS,CAAEC,OAAQ,cAFtE,OAEUC,EAFV,OAGUC,EAAYD,EAASE,KAAKC,MAHpC,IAIqBF,GAJrB,IAII,2BAA2B,QAChBG,IAAMpB,GACbK,GAAiB,GANzB,8EAUIgB,QAAQC,IAAR,MAVJ,0DAZ6B,+BA2BdC,EA3Bc,sEA2B7B,WAAgCb,GAAhC,SAAAC,EAAA,6DACED,EAAEc,iBADJ,kBAG2BZ,IAAMa,KAAK,eAAgB,CAChDC,SAAU,EACVN,GAAIpB,EACJ2B,WAAY,CACVC,OAA2B,IAAnBpB,GAAyBA,KAPzC,cAWIH,GAAiB,GACjBwB,SAASC,SAZb,gDAcIT,QAAQC,IAAR,MAdJ,0DA3B6B,sBA2D7B,OApDAS,qBAAU,YAPmB,oCAQ3BC,GACAX,QAAQC,IAAI,WAmDZlB,EAAgB,KACd,kBAAC,WAAD,KACE,yBAAK6B,UAAU,OACb,2BAAOC,KAAK,WAAWC,SAAU,SAACzB,GAAD,OAlBzC,SAA2BA,GACzBA,EAAE0B,OAAOC,QAAU9B,GAAa,GAAQA,GAAa,GAiBP+B,CAAkB5B,MAC1D,gDAEAJ,EAfJ,yBAAK2B,UAAU,OACb,2CACA,2BAAOC,KAAK,OAAOC,SAAU,SAACzB,GAAD,OAAOD,EAAmBC,EAAE0B,OAAOG,UAChE,4BAAQN,UAAU,SAASO,aAAW,kBAAkBC,QAASlB,EAAkBmB,UAAWlC,GAA9F,WAY+B,MAMxBmC,uBAAU,SAACC,EAAMC,GAC9B,IAAMC,EAAU,kBAAC/C,EAAD,CAAUgD,SAAUF,EAAK5C,WAAY2C,IAIrD,OAHAI,IAASC,OAAOH,EAASF,GAGlB,WACL,IACEI,IAASE,uBAAuBN,GAChC,MAAOlC,GACPW,QAAQ8B,MAAMzC","file":"6.chunk.0f4657593f7e912796d9.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport { component } from 'picoapp';\n\nfunction GiftWrap({parentNode}){\n  \n  const giftWrapId = parentNode.getAttribute('gift-product-id');\n  const [giftWrapAdded, setGiftWrapAdded] = useState(false)\n  const [showInput, setShowInput] = useState(false)\n  const [giftWrapMessage, setGiftWrapMessage] = useState();\n  \n  useEffect(() => {\n    getCartInfo()\n    console.log(\"gift\")\n  })\n\n  async function getCartInfo(e){\n    try {\n      const response = await axios.get('/cart.js', { headers: { Pragma: 'no-cache' } })\n      const cartItems = response.data.items\n      for (let item of cartItems){\n        if (item.id == giftWrapId ) {\n          setGiftWrapAdded(true);\n        }\n      }\n    } catch(error){\n      console.log(error)\n    }\n  }\n\n\n  async function addProductToCart(e) {\n    e.preventDefault()\n    try {\n      const response = await axios.post('/cart/add.js', {\n        quantity: 1,\n        id: giftWrapId,\n        properties: {\n          GiftTo: giftWrapMessage != \"\" && giftWrapMessage\n        }\n      })\n\n      setGiftWrapAdded(true)\n      location.reload();\n    } catch(error){\n      console.log(error)\n    }\n  }\n\n  function handleChangeCheck(e){\n    e.target.checked ? setShowInput(true) : setShowInput(false)\n  }\n\n  function renderInput(){\n    return(\n      <div className=\"row\">\n        <label>Receiver Name:</label>\n        <input type=\"text\" onChange={(e) => setGiftWrapMessage(e.target.value)}/>\n        <button className=\"Button\" data-style=\"solid secondary\" onClick={addProductToCart} disabled={ giftWrapMessage ? false : true }>Update</button>\n      </div>\n    )\n  }\n\n  return(\n    giftWrapAdded ? null : (\n      <Fragment>\n        <div className=\"row\">\n          <input type=\"checkbox\" onChange={(e) => handleChangeCheck(e)}/>\n          <label>Purchase Gift Box</label>\n        </div>\n        { showInput ?  renderInput() : null }\n      </Fragment>\n    )\n  )\n}\n\nexport default component((node, ctx) => {\n  const element = <GiftWrap appstate={ctx} parentNode={node} />;\n  ReactDOM.render(element, node);\n\n  // Unmount component on Pjax navigation\n  return function() {\n    try {\n      ReactDOM.unmountComponentAtNode(node);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n});\n"],"sourceRoot":""}